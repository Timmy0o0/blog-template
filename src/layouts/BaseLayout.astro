---
import "@styles/global.css";

import Footer from "@components/widgets/Footer.astro";
import Header from "@components/widgets/Header.astro";
import MobileHeader from "@components/widgets/MobileHeader.astro";
import Head from "@components/widgets/Head.astro";
import { SITE_THEME } from "@config";
import { ClientRouter } from "astro:transitions";
import type { Metadata } from "@interface/data";

interface Props {
  metadata: Metadata;
  jsonLdSchema?: object | object[];
}

const { metadata, jsonLdSchema } = Astro.props;
---

<!doctype html>
<html lang="en" data-theme={SITE_THEME.light}>
  <!-- The data-theme will be set by script below -->
  <head>
    <Head metadata={metadata} jsonLdSchema={jsonLdSchema} />
    <ClientRouter />
    <!-- Katex -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css"
      integrity="sha384-5TcZemv2l/9On385z///+d7MSYlvIEw9FuZTIdZ14vJLqWphw7e7ZPuOiCHJcFCP"
      crossorigin="anonymous"
    />
    <!-- The loading of KaTeX is deferred to speed up page rendering -->
    <script
      is:inline
      defer
      src="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.js"
      integrity="sha384-cMkvdD8LoxVzGF/RPUKAcvmm49FQ0oxwDF3BGKtDXcEc+T1b2N+teh/OJfpU0jr6"
      crossorigin="anonymous"></script>
    <!-- To automatically render math in text elements, include the auto-render extension: -->
    <script
      is:inline
      defer
      src="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/contrib/auto-render.min.js"
      integrity="sha384-hCXGrW6PitJEwbkoStFjeJxv+fSOOQKOPbJxSfM6G5sWZjAyWhXiTIIAmQqnlLlh"
      crossorigin="anonymous"
      onload="renderMathInElement(document.body);"></script>
  </head>
  <body>
    <Header />
    <MobileHeader />
    <main class="mx-auto max-w-7xl px-6 pt-16 sm:px-8 lg:px-10 lg:pt-0">
      <!-- Added pt-16 for mobile and pt-0 for lg screens -->
      <slot />
    </main>
    <Footer />
  </body>
</html>

<!-- Prevent scroll bar from causing layout shift -->
<style>
  html {
    overflow-y: scroll;
  }
</style>

<!-- Theme Toggle Script -->
<script is:inline define:vars={{ SITE_THEME }}>
  // Function to update icons
  const updateThemeIcon = (toggleButton, isDark) => {
    if (!toggleButton) return;

    const sunIcon = toggleButton.querySelector(".sun-icon");
    const moonIcon = toggleButton.querySelector(".moon-icon");

    if (sunIcon && moonIcon) {
      if (isDark) {
        sunIcon.classList.add("hidden");
        moonIcon.classList.remove("hidden");
      } else {
        sunIcon.classList.remove("hidden");
        moonIcon.classList.add("hidden");
      }
    }
  };

  // Function to animate theme icon
  const animateThemeIcons = () => {
    const iconWrappers = document.querySelectorAll("#theme-icon-wrapper");
    iconWrappers.forEach((wrapper) => {
      wrapper.classList.add("animate-spin-once");
      setTimeout(() => {
        wrapper.classList.remove("animate-spin-once");
      }, 300);
    });
  };

  // Function to toggle theme
  const toggleTheme = () => {
    const currentTheme = document.documentElement.getAttribute("data-theme");
    const newTheme =
      currentTheme === SITE_THEME.light ? SITE_THEME.dark : SITE_THEME.light;

    // Set new theme on document
    document.documentElement.setAttribute("data-theme", newTheme);
    localStorage.setItem("theme", newTheme);

    // Animate all toggle icon
    animateThemeIcons();

    // Update all toggle icon
    const themeToggles = document.querySelectorAll("#theme-toggle");
    themeToggles.forEach((toggle) => {
      updateThemeIcon(toggle, newTheme === SITE_THEME.dark);
    });
  };

  // Function to initialize theme
  const initTheme = () => {
    const savedTheme = localStorage.getItem("theme");
    const initialTheme = savedTheme || SITE_THEME.light;

    // Set theme on document
    document.documentElement.setAttribute("data-theme", initialTheme);

    // Find all theme toggle buttons (both mobile and desktop)
    const themeToggles = document.querySelectorAll("#theme-toggle");
    themeToggles.forEach((themeToggle) => {
      // Initialize icons for each toggle button
      updateThemeIcon(themeToggle, initialTheme === SITE_THEME.dark);

      // Add click event listener to each toggle button
      themeToggle.addEventListener("click", toggleTheme);
    });
  };

  // Initialize on load
  initTheme();

  // Re-initialize after Astro view transitions
  document.addEventListener("astro:after-swap", initTheme);
</script>

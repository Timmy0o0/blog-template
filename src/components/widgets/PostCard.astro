---
import { SITE_TAB } from "@config";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getEntries, getEntry } from "astro:content";

interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

// Resolve the category reference
const category = post.data.category ? await getEntry(post.data.category) : null;

// Resolve the tags references
const tags =
  post.data.tags && post.data.tags.length > 0
    ? await getEntries(post.data.tags.slice(0, 2))
    : [];

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  }).format(date);
};
---

<div
  class="group card bg-base-100 border-base-200 dark:border-base-content/10 rounded-lg border shadow-md transition-all duration-200 hover:-translate-y-1 hover:shadow-xl dark:shadow-lg dark:shadow-black/20 dark:hover:shadow-2xl dark:hover:shadow-black/30"
>
  <a href={`/${post.id}`} class="block" title={post.data.title}>
    {
      post.data.image && (
        <figure class="relative overflow-hidden rounded-t-lg">
          <Image
            src={post.data.image}
            alt={`${post.data.title} - ${SITE_TAB}`}
            class="h-40 w-full object-cover transition-transform duration-300 group-hover:scale-105"
            loading="lazy"
            quality={80}
          />
          <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:from-black/40 dark:to-transparent" />
        </figure>
      )
    }

    <div class="card-body p-4">
      <!-- Title -->
      <div
        class="card-title text-base-content group-hover:text-primary mb-3 text-lg leading-tight font-bold transition-colors"
      >
        {post.data.title}
      </div>

      <!-- Categories and Tags separated -->
      <div class="mb-3 space-y-2">
        <!-- Categories -->
        {
          category && (
            <div class="flex flex-wrap gap-1">
              <div class="badge badge-primary badge-sm">
                {category.data.title}
              </div>
            </div>
          )
        }

        <!-- Tags -->
        {
          tags.length > 0 && (
            <div class="flex flex-wrap gap-1">
              {tags.map((tag) => (
                <div class="badge badge-secondary badge-xs">
                  #{tag.data.title}
                </div>
              ))}
            </div>
          )
        }
      </div>

      <!-- Meta info -->
      <div class="card-actions flex items-center">
        <div class="text-base-content/60 flex items-center gap-2 text-xs">
          <Icon name="lucide:calendar" class="h-3 w-3" />
          <time datetime={post.data.pubDate.toISOString()}>
            {formatDate(post.data.pubDate)}
          </time>
        </div>
      </div>
    </div>
  </a>
</div>

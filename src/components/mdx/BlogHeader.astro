---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import { getEntries, getEntry, type CollectionEntry } from "astro:content";

interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const category = await getEntry(post.data.category);
const tags = await getEntries(post.data.tags);

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(date);
};

// Generate breadcrumb items from slug: category/post
const generateBreadcrumbs = () => {
  const breadcrumbs: { label: string; href: string; isLast: boolean }[] = [];

  breadcrumbs.push({
    label: category.data.name,
    href: `/${category.data.id}`,
    isLast: false,
  });
  breadcrumbs.push({
    label: post.data.title,
    href: `/${post.id}`,
    isLast: true,
  });

  return breadcrumbs;
};

const breadcrumbs = generateBreadcrumbs();
---

<header class="prose mb-8 max-w-none">
  <!-- Breadcrumb Navigation -->
  {
    breadcrumbs.length > 0 && (
      <nav class="not-prose mb-6">
        <div class="breadcrumbs text-sm">
          <ul>
            <li>
              <a
                href="/"
                class="hover:text-primary flex items-center transition-colors"
              >
                <Icon name="lucide:home" class="mr-1 h-4 w-4" />
                Home
              </a>
            </li>
            {breadcrumbs.map((item) => (
              <li>
                {item.isLast ? (
                  <span class="text-base-content font-medium">
                    {item.label}
                  </span>
                ) : (
                  <a
                    href={item.href}
                    class="hover:text-primary transition-colors"
                  >
                    {item.label}
                  </a>
                )}
              </li>
            ))}
          </ul>
        </div>
      </nav>
    )
  }

  {
    post.data.cover && (
      <figure class="relative overflow-hidden rounded-xl">
        <Image
          src={post.data.cover}
          alt={`${post.data.title} cover image`}
          class="h-64 w-full rounded-xl object-cover transition-transform duration-500 hover:scale-105 md:h-80 lg:h-96"
          loading="eager"
          quality={90}
        />
        <div class="absolute inset-0 rounded-xl bg-gradient-to-t from-black/60 via-black/20 to-transparent" />
        <div class="absolute bottom-0 left-0 p-6">
          <div class="text-2xl font-bold text-white drop-shadow-lg md:text-3xl lg:text-4xl">
            {post.data.title}
          </div>
        </div>
      </figure>
    )
  }

  <div class="mb-6 flex flex-wrap items-center justify-center gap-4">
    <div class="text-base-content/60 flex items-center gap-2 text-sm">
      <Icon name="lucide:calendar" class="h-4 w-4" />
      <time datetime={post.data.pubDate.toISOString()} class="font-medium">
        Published on {formatDate(post.data.pubDate)}
      </time>
    </div>

    {
      post.data.updatedDate && (
        <div class="text-base-content/60 flex items-center gap-2 text-sm">
          <Icon name="lucide:refresh-cw" class="h-4 w-4" />
          <time
            datetime={post.data.updatedDate.toISOString()}
            class="font-medium"
          >
            Updated on {formatDate(post.data.updatedDate)}
          </time>
        </div>
      )
    }
  </div>

  {
    (category || tags.length > 0) && (
      <div class="mb-8 flex flex-col justify-center gap-4 md:flex-row md:gap-6">
        {category && (
          <div class="flex flex-wrap items-center justify-center gap-2">
            <span class="text-base-content/70 text-sm font-semibold">
              Category:
            </span>
            <div class="flex flex-wrap gap-2">
              <div class="badge badge-primary badge-outline font-medium">
                {category.data.name}
              </div>
            </div>
          </div>
        )}

        {tags.length > 0 && (
          <div class="flex flex-wrap items-center justify-center gap-2">
            <span class="text-base-content/70 text-sm font-semibold">
              Tags:
            </span>
            <div class="flex flex-wrap gap-2">
              {tags.map((tag) => (
                <div class="badge badge-secondary badge-sm">
                  #{tag.data.name}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    )
  }
</header>

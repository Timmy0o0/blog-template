---
import { SITE_TAB, USER_SITE } from "@config";
import type { Metadata } from "@interface/data";
import BaseLayout from "@layouts/BaseLayout.astro";
import BlogPostLayout from "@layouts/BlogPostLayout.astro";
import { getTagTitles, sortPostsByOrder } from "@utils/blog-utils";
import {
  generateBreadcrumbJsonLd,
  generatePostBreadcrumbs,
} from "@utils/breadcrumb-utils";
import {
  createBlogPostingSchema,
  createJsonLdSchema,
} from "@utils/json-ld-utils";
import {
  getCollection,
  getEntry,
  render,
  type CollectionEntry,
} from "astro:content";

interface Props {
  post: CollectionEntry<"blog">;
  prevPost?: CollectionEntry<"blog">;
  nextPost?: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  // Sort by order field, smaller numbers first
  const sortedPosts = sortPostsByOrder(posts);

  return sortedPosts.map((post, index) => {
    const prevPost = index > 0 ? sortedPosts[index - 1] : undefined;
    const nextPost =
      index < sortedPosts.length - 1 ? sortedPosts[index + 1] : undefined;

    return {
      params: { slug: post.id },
      props: { post, prevPost, nextPost },
    };
  });
}

const { post, prevPost, nextPost } = Astro.props;
const { Content, headings } = await render(post);

const tags = await getTagTitles(post.data.tags);
const category = await getEntry(post.data.category);

const metadata: Metadata = {
  title: `${post.data.title} - ${SITE_TAB}`,
  description: post.data.description,
  image: `${USER_SITE}${post.data.image?.src}`,
  type: "article",
  robots: "index, follow",
};

// Generate breadcrumb JSON-LD
const breadcrumbs = generatePostBreadcrumbs(
  category.data.id,
  category.data.title,
  post.id,
  post.data.title,
);
const breadcrumbJsonLd = generateBreadcrumbJsonLd(breadcrumbs);

// Create blog posting schema
const blogPostingSchema = createBlogPostingSchema(
  `${USER_SITE}/${post.id}`,
  post.data.title,
  post.data.description,
  tags,
  `${USER_SITE}${post.data.image.src}`,
  post.data.pubDate,
  post.data.updatedDate,
  `${post.data.title} - ${SITE_TAB}`,
  USER_SITE,
);

// Create unified JSON-LD schema using @graph structure
const jsonLdSchema = createJsonLdSchema([blogPostingSchema, breadcrumbJsonLd]);
---

<BaseLayout metadata={metadata} jsonLdSchema={jsonLdSchema}>
  <BlogPostLayout
    post={post}
    headings={headings}
    prevPost={prevPost}
    nextPost={nextPost}
  >
    <Content />
  </BlogPostLayout>
</BaseLayout>
